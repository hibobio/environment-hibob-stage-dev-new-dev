{{- if hasKey .Requirements.cluster "registry" }}
dockerRegistry: "{{ .Requirements.cluster.registry }}"
{{- end }}


expose:
  enabled: true

JXBasicAuth: "{{ .Parameters.adminUser.username }}:{SHA}{{ .Parameters.adminUser.password | toString | hashPassword }}"

cleanup:
  enabled: false

chartmuseum:
{{- if and (hasKey .Requirements "repository") (eq .Requirements.repository "bucketrepo") }}
  enabled: false
{{- else }}
  env:
    secret:
      BASIC_AUTH_USER: "{{ .Parameters.adminUser.username }}"
      BASIC_AUTH_PASS: "{{ .Parameters.adminUser.password }}"
    open:
      STORAGE: amazon
      STORAGE_AMAZON_BUCKET: jenkinsx-charts
      STORAGE_AMAZON_PREFIX:
      STORAGE_AMAZON_REGION: eu-west-1
{{- end }}

nexus:
  defaultAdminPassword: "{{ .Parameters.adminUser.password }}"
{{- if hasKey .Requirements "repository"}}
{{- if or (eq .Requirements.repository "nexus") (eq .Requirements.repository "") }}
  enabled: true
{{- else }}
  enabled: false
{{- end }}
{{- else }}
  enabled: false
{{- end }}

jenkins:
  Servers:
    Global:
      EnvVars:
        DOCKER_REGISTRY: "242867168342.dkr.ecr.eu-west-1.amazonaws.com"
  Master:
    Cpu: "400m"
    Memory: "1Gi"
    Image: "242867168342.dkr.ecr.eu-west-1.amazonaws.com/jx-master"
    ImageTag: "latest"
    AdminPassword: "{{ .Parameters.adminUser.password }}"
  Persistence:
    mounts:
      - name: jenkins-security-secrets
        mountPath: /etc/jenkins-secrets
        readOnly: true
    volumes:
      - name: jenkins-security-secrets
        secret:
          secretName: jenkins-security-secrets
  Agent:
    KubernetesServerURL: "https://kubernetes.default:443"
    PodTemplates:
      HiBob:
        Name: hibob-scala
        Label: jenkins-hibob-scala
        annotations:
          iam.amazonaws.com/role: ecr-full
        NodeSelector:
          kubernetes.io/lifecycle: spot
        DevPodPorts: 5005, 8080
        volumes:
        - type: Secret
          secretName: jenkins-maven-settings
          mountPath: /root/.m2/
        - type: Secret
          secretName: jenkins-docker-cfg
          mountPath: /home/jenkins/.docker
        - type: Secret
          secretName: jenkins-release-gpg
          mountPath: /home/jenkins/.gnupg
        - type: HostPath
          hostPath: /root/hibob/.sbt
          mountPath: /root/.sbt
        - type: HostPath
          hostPath: /root/hibob/.ivy2
          mountPath: /root/.ivy2
        EnvVars:
          JENKINS_URL: http://jenkins:8080
          # _JAVA_OPTIONS: '-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Dsun.zip.disableMemoryMapping=true -XX:+UseParallelGC -XX:MinHeapFreeRatio=5 -XX:MaxHeapFreeRatio=10 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Xms500M -Xmx5G'
          GIT_COMMITTER_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_NAME: jenkins-x-bot
          GIT_COMMITTER_NAME: jenkins-x-bot
          XDG_CONFIG_HOME: /home/jenkins
          DOCKER_CONFIG: /home/jenkins/.docker/
          POSTGRES_PASSWORD: test
          POSTGRES_USER: postgres
          POSTGRES_DB: test
        ServiceAccount: jenkins
        Containers:
          Jnlp:
            Image: jenkinsci/jnlp-slave:3.26-1-alpine
            RequestCpu: "100m"
            RequestMemory: "128Mi"
            Args: '${computer.jnlpmac} ${computer.name}'
          Postgres:
            Image: postgres:9.6-alpine
            Privileged: true
            RequestCpu: "400m"
            RequestMemory: "512Mi"
            LimitCpu: "1"
            LimitMemory: "1024Mi"
            Tty: true
          Scala:
            Image: gcr.io/jenkinsxio/builder-scala:latest
            Privileged: true
            RequestCpu: "1"
            RequestMemory: "2Gi"
            LimitCpu: "3500m"
            LimitMemory: "4Gi"
            # You may want to change this to true while testing a new image
            # AlwaysPullImage: true
            Command: "/bin/sh -c"
            Args: "cat"
            Tty: true
      Billing:
        Name: hibob-billing-scala
        Label: jenkins-hibob-billing-scala
        annotations:
          iam.amazonaws.com/role: ecr-full
        NodeSelector:
          kubernetes.io/lifecycle: spot
        DevPodPorts: 5005, 8080
        volumes:
        - type: Secret
          secretName: jenkins-maven-settings
          mountPath: /root/.m2/
        - type: Secret
          secretName: jenkins-docker-cfg
          mountPath: /home/jenkins/.docker
        - type: Secret
          secretName: jenkins-release-gpg
          mountPath: /home/jenkins/.gnupg
        - type: HostPath
          hostPath: /root/billing/.sbt
          mountPath: /root/.sbt
        - type: HostPath
          hostPath: /root/billing/.ivy2
          mountPath: /root/.ivy2
        EnvVars:
          JENKINS_URL: http://jenkins:8080
          # _JAVA_OPTIONS: '-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Dsun.zip.disableMemoryMapping=true -XX:+UseParallelGC -XX:MinHeapFreeRatio=5 -XX:MaxHeapFreeRatio=10 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Xms500M -Xmx5G'
          GIT_COMMITTER_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_NAME: jenkins-x-bot
          GIT_COMMITTER_NAME: jenkins-x-bot
          XDG_CONFIG_HOME: /home/jenkins
          DOCKER_CONFIG: /home/jenkins/.docker/
          POSTGRES_PASSWORD: test
          POSTGRES_USER: postgres
          POSTGRES_DB: test
        ServiceAccount: jenkins
        Containers:
          Jnlp:
            Image: jenkinsci/jnlp-slave:3.26-1-alpine
            RequestCpu: "100m"
            RequestMemory: "128Mi"
            Args: '${computer.jnlpmac} ${computer.name}'
          Scala:
            Image: gcr.io/jenkinsxio/builder-scala:latest
            Privileged: true
            RequestCpu: "1"
            RequestMemory: "2Gi"
            LimitCpu: "3500m"
            LimitMemory: "4Gi"
            # You may want to change this to true while testing a new image
            # AlwaysPullImage: true
            Command: "/bin/sh -c"
            Args: "cat"
            Tty: true
          Postgres:
            Image: postgres:9.6-alpine
            Privileged: true
            RequestCpu: "400m"
            RequestMemory: "512Mi"
            LimitCpu: "1"
            LimitMemory: "1024Mi"
            Tty: true
      Surveys:
        Name: hibob-surveys-scala
        Label: hibob-surveys-scala
        annotations:
          iam.amazonaws.com/role: ecr-full
        NodeSelector:
          kubernetes.io/lifecycle: spot
        DevPodPorts: 5005, 8080
        volumes:
        - type: Secret
          secretName: jenkins-maven-settings
          mountPath: /root/.m2/
        - type: Secret
          secretName: jenkins-docker-cfg
          mountPath: /home/jenkins/.docker
        - type: Secret
          secretName: jenkins-release-gpg
          mountPath: /home/jenkins/.gnupg
        - type: HostPath
          hostPath: /root/surveys/.sbt
          mountPath: /root/.sbt
        - type: HostPath
          hostPath: /root/surveys/.ivy2
          mountPath: /root/.ivy2
        EnvVars:
          JENKINS_URL: http://jenkins:8080
          # _JAVA_OPTIONS: '-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Dsun.zip.disableMemoryMapping=true -XX:+UseParallelGC -XX:MinHeapFreeRatio=5 -XX:MaxHeapFreeRatio=10 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Xms500M -Xmx5G'
          GIT_COMMITTER_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_NAME: jenkins-x-bot
          GIT_COMMITTER_NAME: jenkins-x-bot
          XDG_CONFIG_HOME: /home/jenkins
          DOCKER_CONFIG: /home/jenkins/.docker/
          POSTGRES_PASSWORD: test
          POSTGRES_USER: postgres
          POSTGRES_DB: test
        ServiceAccount: jenkins
        Containers:
          Jnlp:
            Image: jenkinsci/jnlp-slave:3.26-1-alpine
            RequestCpu: "100m"
            RequestMemory: "128Mi"
            Args: '${computer.jnlpmac} ${computer.name}'
          Scala:
            Image: gcr.io/jenkinsxio/builder-scala:latest
            Privileged: true
            RequestCpu: "1"
            RequestMemory: "2Gi"
            LimitCpu: "3500m"
            LimitMemory: "4Gi"
            # You may want to change this to true while testing a new image
            # AlwaysPullImage: true
            Command: "/bin/sh -c"
            Args: "cat"
            Tty: true
          Postgres:
            Image: postgres:9.6-alpine
            Privileged: true
            RequestCpu: "400m"
            RequestMemory: "512Mi"
            LimitCpu: "1"
            LimitMemory: "1024Mi"
            Tty: true
      Social:
        Name: hibob-social-scala
        Label: hibob-social-scala
        annotations:
          iam.amazonaws.com/role: ecr-full
        NodeSelector:
          kubernetes.io/lifecycle: spot
        DevPodPorts: 5005, 8080
        volumes:
        - type: Secret
          secretName: jenkins-maven-settings
          mountPath: /root/.m2/
        - type: Secret
          secretName: jenkins-docker-cfg
          mountPath: /home/jenkins/.docker
        - type: Secret
          secretName: jenkins-release-gpg
          mountPath: /home/jenkins/.gnupg
        - type: HostPath
          hostPath: /root/social/.sbt
          mountPath: /root/.sbt
        - type: HostPath
          hostPath: /root/social/.ivy2
          mountPath: /root/.ivy2
        EnvVars:
          JENKINS_URL: http://jenkins:8080
          # _JAVA_OPTIONS: '-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Dsun.zip.disableMemoryMapping=true -XX:+UseParallelGC -XX:MinHeapFreeRatio=5 -XX:MaxHeapFreeRatio=10 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Xms500M -Xmx5G'
          GIT_COMMITTER_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_NAME: jenkins-x-bot
          GIT_COMMITTER_NAME: jenkins-x-bot
          XDG_CONFIG_HOME: /home/jenkins
          DOCKER_CONFIG: /home/jenkins/.docker/
          POSTGRES_PASSWORD: test
          POSTGRES_USER: postgres
          POSTGRES_DB: test
        ServiceAccount: jenkins
        Containers:
          Jnlp:
            Image: jenkinsci/jnlp-slave:3.26-1-alpine
            RequestCpu: "100m"
            RequestMemory: "128Mi"
            Args: '${computer.jnlpmac} ${computer.name}'
          Scala:
            Image: gcr.io/jenkinsxio/builder-scala:latest
            Privileged: true
            RequestCpu: "1"
            RequestMemory: "2Gi"
            LimitCpu: "3500m"
            LimitMemory: "4Gi"
            # You may want to change this to true while testing a new image
            # AlwaysPullImage: true
            Command: "/bin/sh -c"
            Args: "cat"
            Tty: true
          Postgres:
            Image: postgres:9.6-alpine
            Privileged: true
            RequestCpu: "400m"
            RequestMemory: "512Mi"
            LimitCpu: "1"
            LimitMemory: "1024Mi"
            Tty: true
      Goals:
        Name: hibob-goals-scala
        Label: hibob-goals-scala
        annotations:
          iam.amazonaws.com/role: ecr-full
        NodeSelector:
          kubernetes.io/lifecycle: spot
        DevPodPorts: 5005, 8080
        volumes:
        - type: Secret
          secretName: jenkins-maven-settings
          mountPath: /root/.m2/
        - type: Secret
          secretName: jenkins-docker-cfg
          mountPath: /home/jenkins/.docker
        - type: Secret
          secretName: jenkins-release-gpg
          mountPath: /home/jenkins/.gnupg
        - type: HostPath
          hostPath: /root/goals/.sbt
          mountPath: /root/.sbt
        - type: HostPath
          hostPath: /root/goals/.ivy2
          mountPath: /root/.ivy2
        EnvVars:
          JENKINS_URL: http://jenkins:8080
          # _JAVA_OPTIONS: '-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Dsun.zip.disableMemoryMapping=true -XX:+UseParallelGC -XX:MinHeapFreeRatio=5 -XX:MaxHeapFreeRatio=10 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Xms500M -Xmx5G'
          GIT_COMMITTER_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_NAME: jenkins-x-bot
          GIT_COMMITTER_NAME: jenkins-x-bot
          XDG_CONFIG_HOME: /home/jenkins
          DOCKER_CONFIG: /home/jenkins/.docker/
          POSTGRES_PASSWORD: test
          POSTGRES_USER: postgres
          POSTGRES_DB: test
        ServiceAccount: jenkins
        Containers:
          Jnlp:
            Image: jenkinsci/jnlp-slave:3.26-1-alpine
            RequestCpu: "100m"
            RequestMemory: "128Mi"
            Args: '${computer.jnlpmac} ${computer.name}'
          Scala:
            Image: gcr.io/jenkinsxio/builder-scala:latest
            Privileged: true
            RequestCpu: "1"
            RequestMemory: "2Gi"
            LimitCpu: "3500m"
            LimitMemory: "4Gi"
            # You may want to change this to true while testing a new image
            # AlwaysPullImage: true
            Command: "/bin/sh -c"
            Args: "cat"
            Tty: true
          Postgres:
            Image: postgres:9.6-alpine
            Privileged: true
            RequestCpu: "400m"
            RequestMemory: "512Mi"
            LimitCpu: "1"
            LimitMemory: "1024Mi"
            Tty: true
      GradleWithPg:
        Name: gradle-with-pg
        Label: jenkins-gradle-with-pg
        annotations:
          iam.amazonaws.com/role: ecr-full
        NodeSelector:
          kubernetes.io/lifecycle: spot
        DevPodPorts: 5005, 8080
        volumes:
        - type: Secret
          secretName: jenkins-docker-cfg
          mountPath: /home/jenkins/.docker
        EnvVars:
          JENKINS_URL: http://jenkins:8080
          # _JAVA_OPTIONS: '-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Dsun.zip.disableMemoryMapping=true -XX:+UseParallelGC -XX:MinHeapFreeRatio=5 -XX:MaxHeapFreeRatio=10 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Xms500M -Xmx5G'
          GIT_COMMITTER_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_NAME: jenkins-x-bot
          GIT_COMMITTER_NAME: jenkins-x-bot
          XDG_CONFIG_HOME: /home/jenkins
          DOCKER_CONFIG: /home/jenkins/.docker/
          POSTGRES_PASSWORD: test
          POSTGRES_USER: postgres
          POSTGRES_DB: test
        ServiceAccount: jenkins
        Containers:
          Jnlp:
            Image: jenkinsci/jnlp-slave:3.26-1-alpine
            RequestCpu: "100m"
            RequestMemory: "128Mi"
            Args: '${computer.jnlpmac} ${computer.name}'
          Postgres:
            Image: postgres:9.6-alpine
            #Privileged: ture
            RequestCpu: "400m"
            RequestMemory: "512Mi"
            LimitCpu: "1"
            LimitMemory: "1024Mi"
            Tty: true
          Gradle:
            Image: gcr.io/jenkinsxio/builder-gradle:latest
            Privileged: true
            RequestCpu: "1"
            RequestMemory: "1Gi"
            LimitCpu: "2"
            LimitMemory: "2Gi"
            # You may want to change this to true while testing a new image
            # AlwaysPullImage: true
            Command: "/bin/sh -c"
            Args: "cat"
            Tty: true
      Docs:
        Name: hibob-docs-scala
        Label: jenkins-hibob-docs-scala
        annotations:
          iam.amazonaws.com/role: ecr-full
        NodeSelector:
          kubernetes.io/lifecycle: spot
        DevPodPorts: 5005, 8080
        volumes:
        - type: Secret
          secretName: jenkins-maven-settings
          mountPath: /root/.m2/
        - type: Secret
          secretName: jenkins-docker-cfg
          mountPath: /home/jenkins/.docker
        - type: Secret
          secretName: jenkins-release-gpg
          mountPath: /home/jenkins/.gnupg
        - type: HostPath
          hostPath: /root/docs/.sbt
          mountPath: /root/.sbt
        - type: HostPath
          hostPath: /root/docs/.ivy2
          mountPath: /root/.ivy2
        EnvVars:
          JENKINS_URL: http://jenkins:8080
          # _JAVA_OPTIONS: '-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Dsun.zip.disableMemoryMapping=true -XX:+UseParallelGC -XX:MinHeapFreeRatio=5 -XX:MaxHeapFreeRatio=10 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Xms500M -Xmx5G'
          GIT_COMMITTER_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_NAME: jenkins-x-bot
          GIT_COMMITTER_NAME: jenkins-x-bot
          XDG_CONFIG_HOME: /home/jenkins
          DOCKER_CONFIG: /home/jenkins/.docker/
          POSTGRES_PASSWORD: test
          POSTGRES_USER: postgres
          POSTGRES_DB: test
        ServiceAccount: jenkins
        Containers:
          Jnlp:
            Image: jenkinsci/jnlp-slave:3.26-1-alpine
            RequestCpu: "100m"
            RequestMemory: "128Mi"
            Args: '${computer.jnlpmac} ${computer.name}'
          Scala:
            Image: gcr.io/jenkinsxio/builder-scala:latest
            Privileged: true
            RequestCpu: "1"
            RequestMemory: "2Gi"
            LimitCpu: "3500m"
            LimitMemory: "4Gi"
            # You may want to change this to true while testing a new image
            # AlwaysPullImage: true
            Command: "/bin/sh -c"
            Args: "cat"
            Tty: true
          Postgres:
            Image: postgres:9.6-alpine
            Privileged: true
            RequestCpu: "400m"
            RequestMemory: "512Mi"
            LimitCpu: "1"
            LimitMemory: "1024Mi"
            Tty: true
      Mapping:
        Name: hibob-mapping-scala
        Label: jenkins-hibob-mapping-scala
        annotations:
          iam.amazonaws.com/role: ecr-full
        NodeSelector:
          kubernetes.io/lifecycle: spot
        DevPodPorts: 5005, 8080
        volumes:
        - type: Secret
          secretName: jenkins-maven-settings
          mountPath: /root/.m2/
        - type: Secret
          secretName: jenkins-docker-cfg
          mountPath: /home/jenkins/.docker
        - type: Secret
          secretName: jenkins-release-gpg
          mountPath: /home/jenkins/.gnupg
        - type: HostPath
          hostPath: /root/mapping/.sbt
          mountPath: /root/.sbt
        - type: HostPath
          hostPath: /root/mapping/.ivy2
          mountPath: /root/.ivy2
        EnvVars:
          JENKINS_URL: http://jenkins:8080
          # _JAVA_OPTIONS: '-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Dsun.zip.disableMemoryMapping=true -XX:+UseParallelGC -XX:MinHeapFreeRatio=5 -XX:MaxHeapFreeRatio=10 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Xms500M -Xmx5G'
          GIT_COMMITTER_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_NAME: jenkins-x-bot
          GIT_COMMITTER_NAME: jenkins-x-bot
          XDG_CONFIG_HOME: /home/jenkins
          DOCKER_CONFIG: /home/jenkins/.docker/
          POSTGRES_PASSWORD: test
          POSTGRES_USER: postgres
          POSTGRES_DB: test
        ServiceAccount: jenkins
        Containers:
          Jnlp:
            Image: jenkinsci/jnlp-slave:3.26-1-alpine
            RequestCpu: "100m"
            RequestMemory: "128Mi"
            Args: '${computer.jnlpmac} ${computer.name}'
          Scala:
            Image: gcr.io/jenkinsxio/builder-scala:latest
            Privileged: true
            RequestCpu: "1"
            RequestMemory: "2Gi"
            LimitCpu: "3500m"
            LimitMemory: "4Gi"
            # You may want to change this to true while testing a new image
            # AlwaysPullImage: true
            Command: "/bin/sh -c"
            Args: "cat"
            Tty: true
          Postgres:
            Image: postgres:9.6-alpine
            Privileged: true
            RequestCpu: "400m"
            RequestMemory: "512Mi"
            LimitCpu: "1"
            LimitMemory: "1024Mi"
            Tty: true
      Provisioning:
        Name: hibob-provisioning-scala
        Label: jenkins-hibob-provisioning-scala
        annotations:
          iam.amazonaws.com/role: ecr-full
        NodeSelector:
          kubernetes.io/lifecycle: spot
        DevPodPorts: 5005, 8080
        volumes:
        - type: Secret
          secretName: jenkins-maven-settings
          mountPath: /root/.m2/
        - type: Secret
          secretName: jenkins-docker-cfg
          mountPath: /home/jenkins/.docker
        - type: Secret
          secretName: jenkins-release-gpg
          mountPath: /home/jenkins/.gnupg
        - type: HostPath
          hostPath: /root/provisioning/.sbt
          mountPath: /root/.sbt
        - type: HostPath
          hostPath: /root/provisioning/.ivy2
          mountPath: /root/.ivy2
        EnvVars:
          JENKINS_URL: http://jenkins:8080
          # _JAVA_OPTIONS: '-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Dsun.zip.disableMemoryMapping=true -XX:+UseParallelGC -XX:MinHeapFreeRatio=5 -XX:MaxHeapFreeRatio=10 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Xms500M -Xmx5G'
          GIT_COMMITTER_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_NAME: jenkins-x-bot
          GIT_COMMITTER_NAME: jenkins-x-bot
          XDG_CONFIG_HOME: /home/jenkins
          DOCKER_CONFIG: /home/jenkins/.docker/
          POSTGRES_PASSWORD: test
          POSTGRES_USER: postgres
          POSTGRES_DB: test
        ServiceAccount: jenkins
        Containers:
          Jnlp:
            Image: jenkinsci/jnlp-slave:3.26-1-alpine
            RequestCpu: "100m"
            RequestMemory: "512Mi"
            Args: '${computer.jnlpmac} ${computer.name}'
          Scala:
            Image: gcr.io/jenkinsxio/builder-scala:latest
            Privileged: true
            RequestCpu: "1"
            RequestMemory: "4Gi"
            LimitCpu: "3500m"
            LimitMemory: "4Gi"
            # You may want to change this to true while testing a new image
            # AlwaysPullImage: true
            Command: "/bin/sh -c"
            Args: "cat"
            Tty: true
          Postgres:
            Image: postgres:9.6-alpine
            Privileged: true
            RequestCpu: "400m"
            RequestMemory: "512Mi"
            LimitCpu: "1"
            LimitMemory: "1024Mi"
            Tty: true
      Slack-v2:
        Name: hibob-slack-v2-scala
        Label: jenkins-hibob-slack-v2-scala
        annotations:
          iam.amazonaws.com/role: ecr-full
        NodeSelector:
          kubernetes.io/lifecycle: spot
        DevPodPorts: 5005, 8080
        volumes:
        - type: Secret
          secretName: jenkins-maven-settings
          mountPath: /root/.m2/
        - type: Secret
          secretName: jenkins-docker-cfg
          mountPath: /home/jenkins/.docker
        - type: Secret
          secretName: jenkins-release-gpg
          mountPath: /home/jenkins/.gnupg
        - type: HostPath
          hostPath: /root/slack-v2/.sbt
          mountPath: /root/.sbt
        - type: HostPath
          hostPath: /root/slack-v2/.ivy2
          mountPath: /root/.ivy2
        EnvVars:
          JENKINS_URL: http://jenkins:8080
          # _JAVA_OPTIONS: '-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Dsun.zip.disableMemoryMapping=true -XX:+UseParallelGC -XX:MinHeapFreeRatio=5 -XX:MaxHeapFreeRatio=10 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Xms500M -Xmx5G'
          GIT_COMMITTER_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_NAME: jenkins-x-bot
          GIT_COMMITTER_NAME: jenkins-x-bot
          XDG_CONFIG_HOME: /home/jenkins
          DOCKER_CONFIG: /home/jenkins/.docker/
          POSTGRES_PASSWORD: test
          POSTGRES_USER: postgres
          POSTGRES_DB: test
        ServiceAccount: jenkins
        Containers:
          Jnlp:
            Image: jenkinsci/jnlp-slave:3.26-1-alpine
            RequestCpu: "100m"
            RequestMemory: "128Mi"
            Args: '${computer.jnlpmac} ${computer.name}'
          Scala:
            Image: gcr.io/jenkinsxio/builder-scala:latest
            Privileged: true
            RequestCpu: "1"
            RequestMemory: "2Gi"
            LimitCpu: "3500m"
            LimitMemory: "4Gi"
            # You may want to change this to true while testing a new image
            # AlwaysPullImage: true
            Command: "/bin/sh -c"
            Args: "cat"
            Tty: true
          Postgres:
            Image: postgres:9.6-alpine
            Privileged: true
            RequestCpu: "400m"
            RequestMemory: "512Mi"
            LimitCpu: "1"
            LimitMemory: "1024Mi"
            Tty: true
      Zapier-integration:
        Name: hibob-zapier-integration-scala
        Label: jenkins-hibob-zapier-integration-scala
        annotations:
          iam.amazonaws.com/role: ecr-full
        NodeSelector:
          kubernetes.io/lifecycle: spot
        DevPodPorts: 5005, 8080
        volumes:
        - type: Secret
          secretName: jenkins-maven-settings
          mountPath: /root/.m2/
        - type: Secret
          secretName: jenkins-docker-cfg
          mountPath: /home/jenkins/.docker
        - type: Secret
          secretName: jenkins-release-gpg
          mountPath: /home/jenkins/.gnupg
        - type: HostPath
          hostPath: /root/zapier-integration/.sbt
          mountPath: /root/.sbt
        - type: HostPath
          hostPath: /root/zapier-integration/.ivy2
          mountPath: /root/.ivy2
        EnvVars:
          JENKINS_URL: http://jenkins:8080
          # _JAVA_OPTIONS: '-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Dsun.zip.disableMemoryMapping=true -XX:+UseParallelGC -XX:MinHeapFreeRatio=5 -XX:MaxHeapFreeRatio=10 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Xms500M -Xmx5G'
          GIT_COMMITTER_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_NAME: jenkins-x-bot
          GIT_COMMITTER_NAME: jenkins-x-bot
          XDG_CONFIG_HOME: /home/jenkins
          DOCKER_CONFIG: /home/jenkins/.docker/
          POSTGRES_PASSWORD: test
          POSTGRES_USER: postgres
          POSTGRES_DB: test
        ServiceAccount: jenkins
        Containers:
          Jnlp:
            Image: jenkinsci/jnlp-slave:3.26-1-alpine
            RequestCpu: "100m"
            RequestMemory: "128Mi"
            Args: '${computer.jnlpmac} ${computer.name}'
          Scala:
            Image: gcr.io/jenkinsxio/builder-scala:latest
            Privileged: true
            RequestCpu: "1"
            RequestMemory: "2Gi"
            LimitCpu: "3500m"
            LimitMemory: "4Gi"
            # You may want to change this to true while testing a new image
            # AlwaysPullImage: true
            Command: "/bin/sh -c"
            Args: "cat"
            Tty: true
          Postgres:
            Image: postgres:9.6-alpine
            Privileged: true
            RequestCpu: "400m"
            RequestMemory: "512Mi"
            LimitCpu: "1"
            LimitMemory: "1024Mi"
            Tty: true
      Compensation:
        Name: hibob-compensation-gradle-with-pg
        Label: jenkins-hibob-compensation-gradle-with-pg
        annotations:
          iam.amazonaws.com/role: ecr-full
        NodeSelector:
          kubernetes.io/lifecycle: spot
        DevPodPorts: 5005, 8080
        volumes:
        - type: Secret
          secretName: jenkins-docker-cfg
          mountPath: /home/jenkins/.docker
        EnvVars:
          JENKINS_URL: http://jenkins:8080
          # _JAVA_OPTIONS: '-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Dsun.zip.disableMemoryMapping=true -XX:+UseParallelGC -XX:MinHeapFreeRatio=5 -XX:MaxHeapFreeRatio=10 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Xms500M -Xmx5G'
          GIT_COMMITTER_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_NAME: jenkins-x-bot
          GIT_COMMITTER_NAME: jenkins-x-bot
          XDG_CONFIG_HOME: /home/jenkins
          DOCKER_CONFIG: /home/jenkins/.docker/
          POSTGRES_PASSWORD: test
          POSTGRES_USER: postgres
          POSTGRES_DB: test
        ServiceAccount: jenkins
        Containers:
          Jnlp:
            Image: jenkinsci/jnlp-slave:3.26-1-alpine
            RequestCpu: "100m"
            RequestMemory: "128Mi"
            Args: '${computer.jnlpmac} ${computer.name}'
          Postgres:
            Image: postgres:9.6-alpine
            #Privileged: ture
            RequestCpu: "400m"
            RequestMemory: "512Mi"
            LimitCpu: "1"
            LimitMemory: "1024Mi"
            Tty: true
          Gradle:
            Image: gcr.io/jenkinsxio/builder-gradle:latest
            Privileged: true
            RequestCpu: "1"
            RequestMemory: "1Gi"
            LimitCpu: "2"
            LimitMemory: "2Gi"
            # You may want to change this to true while testing a new image
            # AlwaysPullImage: true
            Command: "/bin/sh -c"
            Args: "cat"
            Tty: true
      Slack:
        Name: hibob-slack-gradle-with-pg
        Label: jenkins-hibob-slack-gradle-with-pg
        annotations:
          iam.amazonaws.com/role: ecr-full
        NodeSelector:
          kubernetes.io/lifecycle: spot
        DevPodPorts: 5005, 8080
        volumes:
        - type: Secret
          secretName: jenkins-docker-cfg
          mountPath: /home/jenkins/.docker
        EnvVars:
          JENKINS_URL: http://jenkins:8080
          # _JAVA_OPTIONS: '-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Dsun.zip.disableMemoryMapping=true -XX:+UseParallelGC -XX:MinHeapFreeRatio=5 -XX:MaxHeapFreeRatio=10 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Xms500M -Xmx5G'
          GIT_COMMITTER_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_NAME: jenkins-x-bot
          GIT_COMMITTER_NAME: jenkins-x-bot
          XDG_CONFIG_HOME: /home/jenkins
          DOCKER_CONFIG: /home/jenkins/.docker/
          POSTGRES_PASSWORD: test
          POSTGRES_USER: postgres
          POSTGRES_DB: test
        ServiceAccount: jenkins
        Containers:
          Jnlp:
            Image: jenkinsci/jnlp-slave:3.26-1-alpine
            RequestCpu: "100m"
            RequestMemory: "128Mi"
            Args: '${computer.jnlpmac} ${computer.name}'
          Postgres:
            Image: postgres:9.6-alpine
            #Privileged: ture
            RequestCpu: "400m"
            RequestMemory: "512Mi"
            LimitCpu: "1"
            LimitMemory: "1024Mi"
            Tty: true
          Gradle:
            Image: gcr.io/jenkinsxio/builder-gradle:latest
            Privileged: true
            RequestCpu: "1"
            RequestMemory: "1Gi"
            LimitCpu: "2"
            LimitMemory: "2Gi"
            # You may want to change this to true while testing a new image
            # AlwaysPullImage: true
            Command: "/bin/sh -c"
            Args: "cat"
            Tty: true
      Timelog:
        Name: hibob-timelog-gradle-with-pg
        Label: jenkins-hibob-timelog-gradle-with-pg
        annotations:
          iam.amazonaws.com/role: ecr-full
        NodeSelector:
          kubernetes.io/lifecycle: spot
        DevPodPorts: 5005, 8080
        volumes:
        - type: Secret
          secretName: jenkins-docker-cfg
          mountPath: /home/jenkins/.docker
        EnvVars:
          JENKINS_URL: http://jenkins:8080
          # _JAVA_OPTIONS: '-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Dsun.zip.disableMemoryMapping=true -XX:+UseParallelGC -XX:MinHeapFreeRatio=5 -XX:MaxHeapFreeRatio=10 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Xms500M -Xmx5G'
          GIT_COMMITTER_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_NAME: jenkins-x-bot
          GIT_COMMITTER_NAME: jenkins-x-bot
          XDG_CONFIG_HOME: /home/jenkins
          DOCKER_CONFIG: /home/jenkins/.docker/
          POSTGRES_PASSWORD: test
          POSTGRES_USER: postgres
          POSTGRES_DB: test
        ServiceAccount: jenkins
        Containers:
          Jnlp:
            Image: jenkinsci/jnlp-slave:3.26-1-alpine
            RequestCpu: "100m"
            RequestMemory: "128Mi"
            Args: '${computer.jnlpmac} ${computer.name}'
          Postgres:
            Image: postgres:9.6-alpine
            #Privileged: ture
            RequestCpu: "400m"
            RequestMemory: "512Mi"
            LimitCpu: "1"
            LimitMemory: "1024Mi"
            Tty: true
          Gradle:
            Image: gcr.io/jenkinsxio/builder-gradle:latest
            Privileged: true
            RequestCpu: "1"
            RequestMemory: "1Gi"
            LimitCpu: "2"
            LimitMemory: "2Gi"
            # You may want to change this to true while testing a new image
            # AlwaysPullImage: true
            Command: "/bin/sh -c"
            Args: "cat"
            Tty: true
      Notifications:
        Name: hibob-notifications-gradle-with-pg
        Label: jenkins-hibob-notifications-gradle-with-pg
        annotations:
          iam.amazonaws.com/role: ecr-full
        NodeSelector:
          kubernetes.io/lifecycle: spot
        DevPodPorts: 5005, 8080
        volumes:
        - type: Secret
          secretName: jenkins-docker-cfg
          mountPath: /home/jenkins/.docker
        - type: Secret
          secretName: testimio_token
          mountPath: /home/jenkins/.testimio_token
        EnvVars:
          JENKINS_URL: http://jenkins:8080
          # _JAVA_OPTIONS: '-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Dsun.zip.disableMemoryMapping=true -XX:+UseParallelGC -XX:MinHeapFreeRatio=5 -XX:MaxHeapFreeRatio=10 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Xms500M -Xmx5G'
          GIT_COMMITTER_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_NAME: jenkins-x-bot
          GIT_COMMITTER_NAME: jenkins-x-bot
          XDG_CONFIG_HOME: /home/jenkins
          DOCKER_CONFIG: /home/jenkins/.docker/
          POSTGRES_PASSWORD: test
          POSTGRES_USER: postgres
          POSTGRES_DB: test
        ServiceAccount: jenkins
        Containers:
          Jnlp:
            Image: jenkinsci/jnlp-slave:3.26-1-alpine
            RequestCpu: "100m"
            RequestMemory: "128Mi"
            Args: '${computer.jnlpmac} ${computer.name}'
          Postgres:
            Image: postgres:9.6-alpine
            #Privileged: ture
            RequestCpu: "400m"
            RequestMemory: "512Mi"
            LimitCpu: "1"
            LimitMemory: "1024Mi"
            Tty: true
          Gradle:
            Image: 242867168342.dkr.ecr.eu-west-1.amazonaws.com/jx-builders/gradle
            Privileged: true
            RequestCpu: "1"
            RequestMemory: "1Gi"
            LimitCpu: "2"
            LimitMemory: "2Gi"
            # You may want to change this to true while testing a new image
            # AlwaysPullImage: true
            Command: "/bin/sh -c"
            Args: "cat"
            Tty: true
      Jx-master-image:
        Name: hibob-jx-master
        Label: hibob-jx-master
        NodeSelector:
          kubernetes.io/lifecycle: spot
        DevPodPorts: 5005, 8080
        volumes:
        - type: Secret
          secretName: jenkins-docker-cfg
          mountPath: /home/jenkins/.docker
        - type: Secret
          secretName: jenkins-release-gpg
          mountPath: /home/jenkins/.gnupg
        EnvVars:
          JENKINS_URL: http://jenkins:8080
          # _JAVA_OPTIONS: '-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Dsun.zip.disableMemoryMapping=true -XX:+UseParallelGC -XX:MinHeapFreeRatio=5 -XX:MaxHeapFreeRatio=10 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Xms500M -Xmx5G'
          GIT_COMMITTER_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_NAME: jenkins-x-bot
          GIT_COMMITTER_NAME: jenkins-x-bot
          XDG_CONFIG_HOME: /home/jenkins
          DOCKER_CONFIG: /home/jenkins/.docker/
          POSTGRES_PASSWORD: test
          POSTGRES_USER: postgres
          POSTGRES_DB: test
        ServiceAccount: jenkins
        Containers:
          Jnlp:
            Image: jenkinsci/jnlp-slave:3.26-1-alpine
            RequestCpu: "100m"
            RequestMemory: "128Mi"
            Args: '${computer.jnlpmac} ${computer.name}'
          Base:
            Image: gcr.io/jenkinsxio/builder-base:latest
            Privileged: true
            RequestCpu: "400m"
            RequestMemory: "400Mi"
            LimitCpu: "1"
            LimitMemory: "1Gi"
            # You may want to change this to true while testing a new image
            # AlwaysPullImage: true
            Command: "/bin/sh -c"
            Args: "cat"
            Tty: true
      Jenkins-withdocker:
        Name: jenkins-withdocker
        Label: jenkins-withdocker
        annotations:
          iam.amazonaws.com/role: ecr-full
        NodeSelector:
          kubernetes.io/lifecycle: spot
        DevPodPorts: 5005, 8080
        volumes:
        - type: Secret
          secretName: jenkins-maven-settings
          mountPath: /root/.m2/
        - type: Secret
          secretName: jenkins-docker-cfg
          mountPath: /home/jenkins/.docker
        - type: Secret
          secretName: jenkins-release-gpg
          mountPath: /home/jenkins/.gnupg
        - type: HostPath
          hostPath: /root/billing/.sbt
          mountPath: /root/.sbt
        - type: HostPath
          hostPath: /root/billing/.ivy2
          mountPath: /root/.ivy2
        EnvVars:
          JENKINS_URL: http://jenkins:8080
          # _JAVA_OPTIONS: '-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Dsun.zip.disableMemoryMapping=true -XX:+UseParallelGC -XX:MinHeapFreeRatio=5 -XX:MaxHeapFreeRatio=10 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Xms500M -Xmx5G'
          GIT_COMMITTER_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_NAME: jenkins-x-bot
          GIT_COMMITTER_NAME: jenkins-x-bot
          XDG_CONFIG_HOME: /home/jenkins
          DOCKER_CONFIG: /home/jenkins/.docker/
          POSTGRES_PASSWORD: test
          POSTGRES_USER: postgres
          POSTGRES_DB: test
        ServiceAccount: jenkins
        Containers:
          Jnlp:
            Image: jenkinsci/jnlp-slave:3.26-1-alpine
            RequestCpu: "100m"
            RequestMemory: "128Mi"
            Args: '${computer.jnlpmac} ${computer.name}'
          Jenkins-withdocker:
            Image: 242867168342.dkr.ecr.eu-west-1.amazonaws.com/jenkins-withdocker:latest
            Privileged: true
            RequestCpu: "500m"
            RequestMemory: "500Mi"
            LimitCpu: "1"
            LimitMemory: "1Gi"
            # You may want to change this to true while testing a new image
            # AlwaysPullImage: true
            Command: "/bin/sh -c"
            Args: "cat"
            Tty: true
      jenkins-nodejsx:
        Name: nodejsx
        Label: jenkins-nodejsx
        annotations:
          iam.amazonaws.com/role: ecr-full
        NodeSelector:
          kubernetes.io/lifecycle: spot
        DevPodPorts: 5005, 8080
        volumes:
        - type: Secret
          secretName: jenkins-maven-settings
          mountPath: /root/.m2/
        - type: Secret
          secretName: jenkins-docker-cfg
          mountPath: /home/jenkins/.docker
        - type: Secret
          secretName: jenkins-release-gpg
          mountPath: /home/jenkins/.gnupg
        - type: HostPath
          hostPath: /var/run/docker.sock
          mountPath: /var/run/docker.sock
        EnvVars:
          JENKINS_URL: http://jenkins:8080
          # _JAVA_OPTIONS: '-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -Dsun.zip.disableMemoryMapping=true -XX:+UseParallelGC -XX:MinHeapFreeRatio=5 -XX:MaxHeapFreeRatio=10 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Xms500M -Xmx5G'
          GIT_COMMITTER_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_EMAIL: jenkins-x@googlegroups.com
          GIT_AUTHOR_NAME: jenkins-x-bot
          GIT_COMMITTER_NAME: jenkins-x-bot
          XDG_CONFIG_HOME: /home/jenkins
          DOCKER_CONFIG: /home/jenkins/.docker/
          POSTGRES_PASSWORD: test
          POSTGRES_USER: postgres
          POSTGRES_DB: test
        ServiceAccount: jenkins
        Containers:
          Jnlp:
            Image: jenkinsci/jnlp-slave:3.26-1-alpine
            RequestCpu: "100m"
            RequestMemory: "128Mi"
            Args: '${computer.jnlpmac} ${computer.name}'
          nodejs:
            Image: 242867168342.dkr.ecr.eu-west-1.amazonaws.com/slave_nodejs:latest
            Privileged: true
            RequestCpu: "2"
            RequestMemory: "4Gi"
            LimitCpu: "2"
            LimitMemory: "6Gi"
            # You may want to change this to true while testing a new image
            # AlwaysPullImage: true
            Command: "/bin/sh -c"
            Args: "cat"
            Tty: true

PipelineSecrets:
    GitCreds: https://{{ .Parameters.pipelineUser.username }}:{{ .Parameters.pipelineUser.token }}@{{ trimPrefix "https://" .Requirements.cluster.gitServer | default "https://github.com" |  }}
    GithubToken: "{{ .Parameters.pipelineUser.token }}"
    MavenSettingsXML: |-
        <settings>
            <localRepository>/home/jenkins/.mvnrepository</localRepository>
            <!--This sends everything else to /public -->
{{- if and (hasKey .Requirements "repository") (eq .Requirements.repository "bucketrepo") }}
              <mirrors>
                  <mirror>
                      <id>bucketrepo</id>
                      <name>bucketrepo mirror</name>
                      <mirrorOf>*</mirrorOf>
                      <url>http://bucketrepo/bucketrepo/</url>
                  </mirror>
                </mirrors>
{{- else if and (hasKey .Requirements "repository") (eq .Requirements.repository "none") }}
              <mirrors>
                <mirror>
                  <id>central</id>
                  <name>US Central</name>
                  <url>https://repo.maven.apache.org/maven2</url>
                  <mirrorOf>central</mirrorOf>
                </mirror>
                <mirror>
                  <id>UK</id>
                  <name>UK Central</name>
                  <url>https://uk.maven.org/maven2</url>
                  <mirrorOf>central</mirrorOf>
                </mirror>
              </mirrors>
{{- else }}
              <mirrors>
                <mirror>
                    <id>nexus</id>
                    <name>nexus mirror</name>
                    <mirrorOf>external:*</mirrorOf>
                    <url>http://nexus/repository/maven-group/</url>
                </mirror>
              </mirrors>
{{- end }}

            <!-- lets disable the download progress indicator that fills up logs -->
            <interactiveMode>false</interactiveMode>

            <servers>
                <server>
                    <id>local-nexus</id>
                    <username>{{ .Parameters.adminUser.username }}</username>
                    <password>{{ .Parameters.adminUser.password }}</password>
                </server>
                <server>
                    <id>nexus</id>
                    <username>{{ .Parameters.adminUser.username }}</username>
                    <password>{{ .Parameters.adminUser.password }}</password>
                </server>
                <server>
                    <id>docker.io</id>
                </server>
            </servers>

            <profiles>
                <profile>
                    <id>nexus</id>
                    <properties>
{{- if and (hasKey .Requirements "repository") (eq .Requirements.repository "bucketrepo") }}
                      <altDeploymentRepository>local-nexus::default::http://bucketrepo/bucketrepo/deploy/maven-snapshots/</altDeploymentRepository>
                      <altReleaseDeploymentRepository>local-nexus::default::http://bucketrepo/bucketrepo/deploy/maven-releases/</altReleaseDeploymentRepository>
                      <altSnapshotDeploymentRepository>local-nexus::default::http://bucketrepo/bucketrepo/deploy/maven-snapshots/</altSnapshotDeploymentRepository>
{{- else if and (hasKey .Requirements "repository") (eq .Requirements.repository "none") }}
{{- else }}
                      <altDeploymentRepository>local-nexus::default::http://nexus/repository/maven-snapshots/</altDeploymentRepository>
                      <altReleaseDeploymentRepository>local-nexus::default::http://nexus/repository/maven-releases/</altReleaseDeploymentRepository>
                      <altSnapshotDeploymentRepository>local-nexus::default::http://nexus/repository/maven-snapshots/</altSnapshotDeploymentRepository>
{{- end }}
                    </properties>

                    <repositories>
                        <repository>
                            <id>central</id>
                            <url>http://central</url>
                            <releases><enabled>true</enabled></releases>
                            <snapshots><enabled>true</enabled></snapshots>
                        </repository>
                    </repositories>
                    <pluginRepositories>
                        <pluginRepository>
                            <id>central</id>
                            <url>http://central</url>
                            <releases><enabled>true</enabled></releases>
                            <snapshots><enabled>true</enabled></snapshots>
                        </pluginRepository>
                    </pluginRepositories>
                </profile>
                <profile>
                    <id>repo.jenkins-ci.org</id>
                    <properties>
                        <altDeploymentRepository>repo.jenkins-ci.org::default::https://repo.jenkins-ci.org/releases/</altDeploymentRepository>
                        <altReleaseDeploymentRepository>repo.jenkins-ci.org::default::https://repo.jenkins-ci.org/releases/</altReleaseDeploymentRepository>
                        <altSnapshotDeploymentRepository>repo.jenkins-ci.org::default::https://repo.jenkins-ci.org/snapshots/</altSnapshotDeploymentRepository>
                    </properties>

                </profile>
                <profile>
                    <id>maven.jenkins-ci.org</id>
                    <properties>
                        <altDeploymentRepository>maven.jenkins-ci.org::default::https://maven.jenkins-ci.org/releases/</altDeploymentRepository>
                        <altReleaseDeploymentRepository>maven.jenkins-ci.org::default::https://maven.jenkins-ci.org/releases/</altReleaseDeploymentRepository>
                        <altSnapshotDeploymentRepository>maven.jenkins-ci.org::default::https://maven.jenkins-ci.org/snapshots/</altSnapshotDeploymentRepository>
                    </properties>

                </profile>
                <profile>
                    <id>release</id>
                    <properties>
                        <gpg.executable>gpg</gpg.executable>
                        <!-- TODO use: .Parameters.gpg.passphrase when it is always populated -->
                        <gpg.passphrase></gpg.passphrase>
                    </properties>
                </profile>
            </profiles>

            <activeProfiles>
                <activeProfile>nexus</activeProfile>
            </activeProfiles>
        </settings>
    SSHConfig: |-
        Host github.com
            User git
            IdentityFile /root/.ssh-git/ssh-key
            StrictHostKeyChecking no

{{- if eq .Requirements.webhook "lighthouse" }}
controllerbuild:
  enabled: true
  args:
  - "controller"
  - "build"
  - "--git-reporting"
  - "--batch-mode"
  - "--git-credentials"
  - "--verbose"
{{- end }}

{{- if hasKey .Requirements.cluster "strictPermissions" }}
{{- if and (eq .Requirements.cluster.provider "openshift") (.Requirements.cluster.strictPermissions) }}
gcpreviews:
  clusterrole:
    enabled: false

postinstalljob:
  clusterrole:
    enabled: false

controllerworkflow:
  clusterrole:
    enabled: false

controllerbuild:
  clusterrole:
    enabled: false

controllercommitstatus:
  clusterrole:
    enabled: false

controllerrole:
  role:
    additionalNamespaces:
    - jx-staging
    - jx-production
  clusterrole:
    enabled: false

controllerteam:
  clusterrole:
    enabled: false

heapster:
  enabled: false
  rbac:
    create: false
{{- end }}
{{- end }}

gcactivities:
  args:
    - "gc"
    - "activities"
    - "--batch-mode"
    - "--pr-history-limit=30"
  cronjob:
    enabled: true
    schedule: "0/30 * * * *"
{{- if hasKey .Requirements.cluster "strictPermissions" }}
{{- if and (eq .Requirements.cluster.provider "openshift") (.Requirements.cluster.strictPermissions) }}
  clusterrole:
    enabled: false
{{- end }}
{{- end }}

gcpods:
  cronjob:
    enabled: true
    schedule: "0/30 * * * *"
{{- if hasKey .Requirements.cluster "strictPermissions" }}
{{- if and (eq .Requirements.cluster.provider "openshift") (.Requirements.cluster.strictPermissions) }}
  clusterrole:
    enabled: false
{{- end }}
{{- end }}
